import Head from "next/head";
import Image from "next/image";

import React from "react";
import { useArcanaAuth } from "../arcana-backup/auth/useArcanaAuth";
import Loader from "../components/loader";
import { Info } from "../components/info";
import styles from "./index.module.css";
import abi from "../helpers/Reflow/Reflow.json";
import { ethers } from "ethers";

import { useAccount, useSigner } from "wagmi";
import { chain, chainId, useNetwork } from "wagmi";

const Home = () => {
	const {
		user,
		connect,
		isLoggedIn,
		loading,
		loginWithSocial,
		provider,
		signer,
	} = useArcanaAuth();

	const REFLOW_ADDRESS = "0xfE3DC8b64AaF35Ef800EfB01FD0E2A0a8dC90ec5";
	const REFLOW_ABI = abi.abi;
	const FDAIX = "0x5D8B4C2554aeB7e86F387B4d6c00Ac33499Ed01f";

	const { address } = useAccount();

	const onConnectClick = async () => {
		try {
			await connect();
		} catch (e) {
			console.log(e);
		}
	};

	const onConnect = () => {
		console.log("connected");
	};

	const startStream = async () => {
		try {
			console.log(provider);

			// const Reflow = new ethers.Contract(
			// 	REFLOW_ADDRESS,
			// 	REFLOW_ABI,
			// 	signer
			// );

			// const txn = await Reflow.createFlowFromContract({
			// 	token: FDAIX,
			// 	receiver: user.address,
			// });
		} catch (err) {
			console.log(err);
		}
	};

	const endStream = async () => {
		try {
			console.log(provider);

			// const Reflow = new ethers.Contract(
			// 	REFLOW_ADDRESS,
			// 	REFLOW_ABI,
			// 	signer
			// );

			// const txn = await Reflow.deleteFlowFromContract({
			// 	token: FDAIX,
			// 	receiver: user.address,
			// });
		} catch (err) {
			console.log(err);
		}
	};

	React.useEffect(() => {
		provider.on("connect", onConnect);
		return () => {
			provider.removeListener("connect", onConnect);
		};
	}, [provider]);

	return (
		<>
			<Head>
				<title>Reflow</title>
				<meta
					name="description"
					content="Generated by create next app"
				/>
				<meta
					name="viewport"
					content="width=device-width, initial-scale=1"
				/>
				<link rel="icon" href="/favicon.ico" />
			</Head>

			<main
				className="flex flex-col items-center place-content-center
			p-[12px] bg-isGrayLightEmphasis6 w-full min-h-screen text-isGrayDarkEmphasis6"
			>
				<div className="text-7xl font-bold drop-shadow-sm">
					Self-Mutating{" "}
					<span
						className="text-isWhite bg-gradient-to-br from-isBlueLight to-isBlueDark py-[2px] px-[8px] 
					rounded-xl "
					>
						Reward Streams
					</span>
				</div>
				<div className="mt-[6px] mb-[12px] text-xl font-semibold text-isGrayLight2">
					Create automated reward flows in real-time which stream +
					update themselves.
				</div>

				<div className="flex flex-row items-center">
					<button
						className="flex flex-col items-center font-bold text-lg 
						bg-isGreenDark text-isWhite shadow-sm py-[4px] px-[12px] m-[12px]
						rounded-lg"
						onClick={() => {
							startStream();
						}}
					>
						Start Reward Stream
					</button>

					<button
						className="flex flex-col items-center font-bold text-lg 
						bg-isRedDark text-isWhite shadow-sm py-[4px] px-[12px] m-[12px]
						rounded-lg"
						onClick={() => {
							endStream();
						}}
					>
						Cancel Reward Stream
					</button>
				</div>

				{loading && (
					<Loader
						secondaryColor="rgb(10, 132, 256)"
						strokeColor="rgb(0, 122, 255)"
					/>
				)}
				{!loading && !isLoggedIn && (
					<button
						className="flex flex-col items-center font-bold text-lg 
						bg-isBlueDark text-isWhite shadow-sm py-[4px] px-[12px]
						rounded-lg"
						onClick={onConnectClick}
					>
						Sign In
					</button>
				)}
			</main>
		</>
	);
};

export default Home;
